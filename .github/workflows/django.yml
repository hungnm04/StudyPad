name: Django CI

on:
  push:
    branches: [ "main", "development-pipeline", "feature/*" ]
  pull_request:
    branches: [ "main", "development-pipeline" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r noteApp/requirements.txt

    - name: Run Django tests with coverage
      working-directory: ./noteApp
      run: |
        coverage run --rcfile=.coveragerc manage.py test posts api
        coverage xml -o coverage.xml

    - name: Upload coverage to SonarCloud
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: noteApp/coverage.xml

  sast-scan:
    name: SAST Scan (SonarCloud)
    runs-on: ubuntu-latest
    permissions:
      contents: read
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download coverage report
        uses: actions/download-artifact@v4
        with:
          name: coverage-report
          path: ./noteApp

      - name: SonarCloud Scan
        uses: SonarSource/sonarqube-scan-action@v5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  sca-scan:
    name: SCA Scan (Snyk)
    runs-on: ubuntu-latest
    needs: build

    permissions:
      security-events: write 
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: pip install -r noteApp/requirements.txt

      - name: Install Snyk CLI
        run: npm install -g snyk

      - name: Run Snyk to check for vulnerabilities
        continue-on-error: true
        run: snyk test --file=noteApp/requirements.txt --sarif-file-output=snyk.sarif
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      - name: Upload result to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: snyk.sarif

  docker-security:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: read
      security-events: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image
        run: |
          docker build -t studypad-app:${{ github.sha }} .

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'studypad-app:${{ github.sha }}'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL'
          scanners: 'vuln,secret,config'
          exit-code: 0

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Generate vulnerability report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'studypad-app:${{ github.sha }}'
          format: 'json'
          output: 'trivy-report.json'

      - name: Upload vulnerability report
        uses: actions/upload-artifact@v4
        with:
          name: trivy-report
          path: trivy-report.json
          retention-days: 30

      - name: Fail on high/critical vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'studypad-app:${{ github.sha }}'
          format: 'table'
          severity: 'HIGH,CRITICAL'
          exit-code: 1
